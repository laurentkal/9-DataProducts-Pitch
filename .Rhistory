trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs"
)
library(ggplot2)
g <- ggplot(data = training, aes(x = Superplasticizer, y = CompressiveStrength)) + geom_histogram()
g
g <- ggplot(data = training, aes(x = Superplasticizer, y = CompressiveStrength)) + geom_histogram(stat = "identity")
g
histogram(x = Superplasticizer, data = training)
histogram(x = training$Superplasticizer, data = training)
histogram(x = log(training$Superplasticizer))
histogram(x = training$Superplasticizer, data = training)
histogram(x = log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(adData)
head(diagnosis)
head(predictors)
ss <- training[,grep('^IL', x = names(training))]
ss
head(ss)
dim(ss)
class(ss)
preProcess(ss, method = "pca", thresh = .8)
preProcess(ss, method = "pca", thresh = .8, outcome = training$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- predictors[, grep("^IL", colnames(training), value = TRUE)]
head(training2)
IL <- grep("^IL", colnames(predictors))
IL
IL <- grep("^IL", colnames(predictors), value = TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(ILpredictors, diagnosis)
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)[[1]]
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)
head(intrain)
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)[[1]]
head(intrain)
training <- df[inTrain, ]
testing <- df[-inTrain, ]
model1 <- train(diagnosis ~., method = "glm", data = training)
train(diagnosis ~ ., method="glm", data=training)
library(caret)
train(diagnosis ~ ., method="glm", data=training)
install.packages("e1071")
train(diagnosis ~ ., method="glm", data=training)
model1 <- train(diagnosis ~ ., method="glm", data=training)
prediction1 <- predict(model1, newdata = testing)
C1 <- confusionMatrix(prediction1)
C1 <- confusionMatrix(prediction1, testing$diagnosis)
head(C1)
model2 <- train(diagnosis ~., method = "glm", preProcess = "pca", data = training, trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
C2 <- confusionMatrix(testing$diagnosis, predict(model2, testing))
C2
Sys.info()
Sys.info()$sysname
Sys.info()[1:4]
Sys.info()[1:3]
Sys.info()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
head(segmentationOriginal)
colnames(segmentationOriginal)
library(caret)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
dim(training)
dim(segmentationOriginal)
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
modfit$finalModel
print(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(pgmm)
sessionInfo()
library(pgmm)
data(olive)
olive = olive[,-1]
require(pgmm)
require(ElemStatLearn)
require(ElemStatLearn)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
We can deduce from these tables that although Tornadoes have caused more than twice as much injuries as Heat since 1995, Heat events appear to be the most lethal weather events.
library(pgmm)
data(olive)
olive = olive[,-1]
require(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
library(caret)
?train
names(getModelInfo())
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
inTrain <- createDataPartition(y = olive$Area, p = .75, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
modfit$finalModel
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = testing)
modfit <- train(Area ~., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(trainSA)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(caret)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = glm, family = binomial, data = trainSA)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
ptest <- predict(modfit, newdata = testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
modfit$chd
modfit$finalmodel$chd
missclass(trainSA$chd, modfit$finalModel)
modfit$finalModel
ptrain <- predict(modfit, newdata = trainSA)
ptest <- predict(modfit, newdata = testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(trainSA, ptrain)
missClass(testSA, ptest)
missClass(trainSA$chd, ptrain)
missClass(testSA$chd, ptest)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modfit$finalModel)
intrain$Case
head(training$Case)
head(segmentationOriginal$Case)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
fancyRpartPlot(modfit$finalModel)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modfit$finalModel)
data("segmentationOriginal")
rm(list=ls())
data("segmentationOriginal")
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
data("segmentationOriginal")
set.seed(125)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Case ~., method = "rpart", data = training)
fancyRpartPlot(modfit$finalModel)
plot(modfit$finalModel, uniform=T)
text(modfit$finalModel, cex = 0.8)
fancyRpartPlot(modfit$finalModel)
training$Case
segmentationOriginal$Case
head(segmentationOriginal)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
set.seed(125)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Case ~., method = "rpart", data = training)
finMod <- modfit$finalModel
fancyRpartPlot(finMod)
intrain <- which(segmentationOriginal$Case == 'Train')
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Class ~., method = "rpart", data = training)
finMod <- modfit$finalModel
fancyRpartPlot(finMod)
?varImp
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(model.fit$finalModel)
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(model.fit$finalModel)
imp <- varImp(modfit$finalModel)
modfit$finalModel
modfit <- train(y~., data=vowel.train, method="rf")
data(vowel.train)
data(vowel.test)
data(vowel.train)$y <- as.factor(data(vowel.train)$y)
data(vowel.test)$y <- as.factor(data(vowel.test)$y)
data(vowel.train)
data(vowel.test)
data(vowel.train)$y <- as.factor(data(vowel.train)$y)
vowel.train$y <- as.factor(data(vowel.train)$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(modfit$finalModel)
imp
order(imp)
arrange(imp, decreasing = TRUE)
?arrange
arrange(imp, desc(Overall))
imp[order(imp[1]),]
?paste0
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
data <- read.csv("./raw-7-6.csv")
head(data)
data <- read.csv("./raw-7-6.csv", sep =",", header = TRUE)
View(data)
data$X.7
data$Merci.d.attribuer.une.note.de.1.Ã..4.Ã.toiles.selon.que.l.affirmation.vous.correspond.ou.non..1.3.
library(reshape2)
colsplit(data$Merci.d.attribuer.une.note.de.1.Ã..4.Ã.toiles.selon.que.l.affirmation.vous.correspond.ou.non..1.3., "~")
colsplit(data$Merci.d.attribuer.une.note.de.1.Ã..4.Ã.toiles.selon.que.l.affirmation.vous.correspond.ou.non..1.3., "~", names = c("1", "2"))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
install.packages("rCharts")
install_github('ramnathv/rCharts')
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
getwd()
install_github('ramnathv/rCharts')
library(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
dTable(airquality)
getwd()
data <- read.csv("./raw-7-7.csv")
library(xlsx)
write.xlsx(data, file = "./resultats.xls", col.names = TRUE)
head(data)
getwd()
data <- read.csv("./raw-7-7.csv")
View(data)
library(slidify)
setwd("./01JHU/9-DataProducts")
author("Pitch")
slidify("index.Rmd")
slidify("index.Rmd")
--- .class #id &radio
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
require(RCurl)
require(foreign)
#Load drinks data into R, from 538 github repo
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv"
drinks <- getURL(url)
drinks <- read.csv(textConnection(drinks))
drinks$Total <- rowSums(drinks[, -c(1,5)], na.rm = TRUE)
colnames(drinks) <- c("Country", "Beer", "Spirit", "Wine", "Pure", "Total")
require(googleVis)
g <- gvisGeoChart(drinks, locationvar = "Country", colorvar = "Beer")
print(g)
plot(g)
print(g)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
getwd()
browseURL("index.html")
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
shiny::runApp('~/01JHU/9-DataProducts/DDP_Project v2')
